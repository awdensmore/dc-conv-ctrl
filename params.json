{"name":"Dc-conv-ctrl","tagline":"Control a Dc/DC converter using STM32.","body":"### Project Notes\r\nThis is a general list of notes of important tips I've learned along the way.\r\n\r\n**PWM using DMA** - This is useful to rapidly change the PWM duty cycle without accessing the CPU. Some important tips when using CubeMX to generate the setup code:\r\n\r\n```C\r\n    hdma_tim1_ch1.Instance = DMA1_Channel2;\r\n    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;\r\n    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;\r\n    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;\r\n    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;\r\n    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;\r\n    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;\r\n    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;\r\n    HAL_DMA_Init(&hdma_tim1_ch1);\r\n```\r\n\r\nI couldn't get this to work until I set MemInc to enable and alignment to word (defaulted to byte). To start the PWM use:\r\n\r\n```C\r\n    uint32_t duty_cycle[i] = {x, y, ..., i};  // Value from 0-2^16. Must be less than period\r\n    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, duty_cycle, i);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}